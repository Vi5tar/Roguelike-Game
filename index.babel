class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      positionX: 40,
      positionY: 40,
      enemys: [
        {
          x: 120,
          y: 100
        }, {
          x: 140,
          y: 140
        }
      ]
    };
    this.handleKeyPress = this.handleKeyPress.bind(this);
    this.handleLeft = this.handleLeft.bind(this);
    this.handleUp = this.handleUp.bind(this);
    this.handleRight = this.handleRight.bind(this);
    this.handleDown = this.handleDown.bind(this);
  }
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyPress);
  }

  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyPress);
  }

  handleKeyPress(event) {
    switch (event.keyCode) {
      case 37:
        this.handleLeft();
        break;
      case 38:
        this.handleUp();
        break;
      case 39:
        this.handleRight();
        break;
      case 40:
        this.handleDown();
        break;
    }
  }

  handleLeft() {
    var movement = this.collisionDetection("left", -20);
    this.setState({
      positionX: this.state.positionX + movement
    });
  }

  handleUp() {
    var movement = this.collisionDetection("up", -20);
    this.setState({
      positionY: this.state.positionY + movement
    });
  }

  handleRight() {
    var movement = this.collisionDetection("right", 20);
    this.setState({
      positionX: this.state.positionX + movement
    });
  }

  handleDown() {
    var movement = this.collisionDetection("down", 20);
    this.setState({
      positionY: this.state.positionY + movement
    });
  }

  collisionDetection(direction, increment) {
    if (direction == "left" || direction == "right") {
      for (var a = 0; a < this.state.enemys.length; a++) {
        var tempEnemy = this.state.enemys[a];
        if (this.state.positionX + increment == tempEnemy.x && this.state.positionY == tempEnemy.y) {
          console.log("Side Whack!");
          return 0;
        }
      }
      return increment;
    } else if (direction == "up" || direction == "down") {
      for (var a = 0; a < this.state.enemys.length; a++) {
        var tempEnemy = this.state.enemys[a];
        if (this.state.positionY + increment == tempEnemy.y && this.state.positionX == tempEnemy.x) {
          console.log("Vertical Whack!");
          return 0;
        }
      }
      return increment;
    }
  }

  render() {
    const character = {
      position: 'absolute',
      backgroundColor: 'blue',
      width: 20,
      height: 20,
      top: this.state.positionY,
      left: this.state.positionX
    }

    const boardCreate = this.state.enemys.map((thing, index) => {
      var enemy = {
        position: 'absolute',
        backgroundColor: 'red',
        width: 20,
        height: 20,
        top: thing.y,
        left: thing.x
      }
      return <div style={enemy}></div>
    })

    return (<div>
      <div style={character}/> {boardCreate}
    </div>);
  }
}
ReactDOM.render(<Game/>, document.getElementById("rogueLike"));
