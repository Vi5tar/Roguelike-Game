const heroMenu = {
  position: 'absolute',
  backgroundColor: 'black',
  color: 'white',
  width: 200,
  height: 300,
  top: 0,
  left: 700
}

const HeroStats = (props) => {
  return (<div style={heroMenu}>
    <p>X: {props.xpos}</p>
    <p>Y: {props.ypos}</p>
    <p>HP: {props.hp}</p>
    <p>Weapon: {props.weapon}</p>
    <p>Attack: {props.atkMin}
      -{props.atkMax}</p>
  </div>)
}

class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      hero: {
        x: 40,
        y: 40,
        HP: 100,
        atkMin: 10,
        atkMax: 15,
        weapon: 'none',
        weaponBonus: 0
      },
      enemys: [
        {
          x: 120,
          y: 100,
          status: 1,
          hp: 20,
          atk: 5
        }, {
          x: 140,
          y: 140,
          status: 1,
          hp: 20,
          atk: 5
        }
      ],
      playArea: [
        {
          x: 0,
          y: 0,
          width: 400,
          height: 360
        }, {
          x: 400,
          y: 180,
          width: 200,
          height: 20
        }, {
          x: 200,
          y: 360,
          width: 20,
          height: 200
        }
      ]
    };
    this.handleKeyPress = this.handleKeyPress.bind(this);
    this.handleLeft = this.handleLeft.bind(this);
    this.handleUp = this.handleUp.bind(this);
    this.handleRight = this.handleRight.bind(this);
    this.handleDown = this.handleDown.bind(this);
    this.wallDetection = this.wallDetection.bind(this);
  }
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyPress);
  }

  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyPress);
  }

  handleKeyPress(event) {
    switch (event.keyCode) {
      case 37:
        this.handleLeft();
        break;
      case 38:
        this.handleUp();
        break;
      case 39:
        this.handleRight();
        break;
      case 40:
        this.handleDown();
        break;
    }
  }

  handleLeft() {
    if (this.wallDetection("left", -20)) {
      var movement = this.enemyDetection("left", -20);
      let hero = Object.assign({}, this.state.hero);
      hero.x = this.state.hero.x + movement;
      this.setState({hero});
    }
  }

  handleUp() {
    if (this.wallDetection("up", -20)) {
      var movement = this.enemyDetection("up", -20);
      let hero = Object.assign({}, this.state.hero);
      hero.y = this.state.hero.y + movement;
      this.setState({hero});
    }
  }

  handleRight() {
    if (this.wallDetection("right", 20)) {
      var movement = this.enemyDetection("right", 20);
      let hero = Object.assign({}, this.state.hero);
      hero.x = this.state.hero.x + movement;
      this.setState({hero});
    }
  }

  handleDown() {
    if (this.wallDetection("down", 20)) {
      var movement = this.enemyDetection("down", 20);
      let hero = Object.assign({}, this.state.hero);
      hero.y = this.state.hero.y + movement;
      this.setState({hero});
    }
  }

  enemyDetection(direction, increment) {
    var enemys = [];
    for (var b = 0; b < this.state.enemys.length; b++) {
      enemys.push(this.state.enemys[b]);
    }
    if (direction == "left" || direction == "right") {
      for (var a = 0; a < enemys.length; a++) {
        var tempEnemy = enemys[a];
        if (tempEnemy.status == 1) {
          if (this.state.hero.x + increment == tempEnemy.x && this.state.hero.y == tempEnemy.y) {
            console.log("Side Whack!");
            this.combat(tempEnemy);
            enemys[a] = tempEnemy;
            this.setState({enemys});
            return 0;
          }
        }
      }
      return increment;
    } else if (direction == "up" || direction == "down") {
      for (var a = 0; a < enemys.length; a++) {
        var tempEnemy = enemys[a];
        if (tempEnemy.status == 1) {
          if (this.state.hero.y + increment == tempEnemy.y && this.state.hero.x == tempEnemy.x) {
            console.log("Vertical Whack!");
            this.combat(tempEnemy);
            enemys[a] = tempEnemy;
            this.setState({enemys});
            return 0;
          }
        }
      }
      return increment;
    }
  }

  wallDetection(direction, increment) {
    if (direction == "left" || direction == "right") {
      for (var a = 0; a < this.state.playArea.length; a++) {
        var tempPlayArea = this.state.playArea[a];
        if (this.state.hero.x + increment >= tempPlayArea.x && this.state.hero.x + increment < tempPlayArea.x + tempPlayArea.width && this.state.hero.y >= tempPlayArea.y && this.state.hero.y < tempPlayArea.y + tempPlayArea.height) {
          return true;
        }
      }
      return false;
    } else if (direction == "up" || direction == "down") {
      for (var a = 0; a < this.state.playArea.length; a++) {
        var tempPlayArea = this.state.playArea[a];
        if (this.state.hero.y + increment >= tempPlayArea.y && this.state.hero.y + increment < tempPlayArea.y + tempPlayArea.height && this.state.hero.x >= tempPlayArea.x && this.state.hero.x < tempPlayArea.x + tempPlayArea.width) {
          return true;
        }
      }
      return false;
    }
  }

  combat(enemy) {
    let hero = Object.assign({}, this.state.hero);
    if (enemy.hp > 0) {
      enemy.hp = enemy.hp - hero.atkMin;
      hero.HP = hero.HP - enemy.atk;
      if (enemy.hp <= 0) {
        enemy.status = 0;
      }
      if (hero.HP <= 0) {
        this.setState({hero});
        alert("GAME OVER");
        document.location.reload();
      }
      this.setState({hero});
    }
  }

  render() {
    const character = {
      position: 'absolute',
      //backgroundColor: 'blue',
      //width: 20,
      //height: 20,
      top: this.state.hero.y - 4,
      left: this.state.hero.x
    }

    const locateEnemys = this.state.enemys.map((thing, index) => {
      var enemy = {
        position: 'absolute',
        //backgroundColor: 'red',
        //width: 20,
        //height: 20,
        top: thing.y - 4,
        left: thing.x
      }
      if (thing.status == 1) {
        return <div style={enemy}>
          {/* <i className="fab fa-empire fa-lg" data-fa-transform="up-2"></i> */}
          <img src="images/ATTAK_000.png" width="20" height="20"></img>
        </div>
      }
    })

    const playSpace = this.state.playArea.map((thing, index) => {
      var playArea = {
        position: 'absolute',
        backgroundColor: 'gray',
        zIndex: -1,
        width: thing.width,
        height: thing.height,
        top: thing.y,
        left: thing.x
      }
      return <div style={playArea}/>
    })

    return (<div>
      <div style={character}>
        {/* <i className="fab fa-rebel fa-lg" data-fa-transform="up-2"></i> */}
        <img src="images/_IDLE_000.png" width="20" height="20"></img>
      </div>
      {locateEnemys}
      {playSpace}
      <HeroStats xpos={this.state.hero.x} ypos={this.state.hero.y} hp={this.state.hero.HP} weapon={this.state.hero.weapon} atkMin={this.state.hero.atkMin} atkMax={this.state.hero.atkMax}/>
    </div>);
  }
}
ReactDOM.render(<Game/>, document.getElementById("rogueLike"));
